// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package wireprune

import (
	"io"
	"sigs.k8s.io/cli-utils/internal/pkg/clik8s"
	"sigs.k8s.io/cli-utils/internal/pkg/prune"
	"sigs.k8s.io/cli-utils/internal/pkg/resourceconfig"
	"sigs.k8s.io/cli-utils/internal/pkg/util"
	"sigs.k8s.io/cli-utils/internal/pkg/wirecli/wireconfig"
	"sigs.k8s.io/cli-utils/internal/pkg/wirecli/wiregit"
	"sigs.k8s.io/cli-utils/internal/pkg/wirecli/wirek8s"
)

// Injectors from wire.go:

func DoPrune(resourceConfigPath clik8s.ResourceConfigPath, writer io.Writer, args util.Args) (prune.Result, error) {
	configFlags, err := wirek8s.NewConfigFlags(args)
	if err != nil {
		return prune.Result{}, err
	}
	config, err := wirek8s.NewRestConfig(configFlags)
	if err != nil {
		return prune.Result{}, err
	}
	dynamicInterface, err := wirek8s.NewDynamicClient(config)
	if err != nil {
		return prune.Result{}, err
	}
	restMapper, err := wirek8s.NewRestMapper(config)
	if err != nil {
		return prune.Result{}, err
	}
	client, err := wirek8s.NewClient(dynamicInterface, restMapper)
	if err != nil {
		return prune.Result{}, err
	}
	pluginConfig := wireconfig.NewPluginConfig()
	factory := wireconfig.NewResMapFactory(pluginConfig)
	fileSystem := wireconfig.NewFileSystem()
	transformerFactory := wireconfig.NewTransformerFactory()
	kustomizeProvider := wireconfig.NewKustomizeProvider(factory, fileSystem, transformerFactory, pluginConfig)
	rawConfigFileProvider := &resourceconfig.RawConfigFileProvider{}
	configProvider := wireconfig.NewConfigProvider(resourceConfigPath, kustomizeProvider, rawConfigFileProvider)
	resourcePruneConfigs, err := wireconfig.NewResourcePruneConfig(resourceConfigPath, configProvider)
	if err != nil {
		return prune.Result{}, err
	}
	repository := wiregit.NewOptionalRepository(resourceConfigPath)
	commitIter := wiregit.NewOptionalCommitIter(repository)
	commit := wiregit.NewOptionalCommit(commitIter)
	prunePrune := &prune.Prune{
		DynamicClient: client,
		Out:           writer,
		Resources:     resourcePruneConfigs,
		Commit:        commit,
	}
	result, err := NewPruneCommandResult(prunePrune, writer)
	if err != nil {
		return prune.Result{}, err
	}
	return result, nil
}
